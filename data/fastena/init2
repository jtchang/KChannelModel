// $Id: 

// Batch implementation suitable for serial or parallel execution
// for stimulus current i iterating over a range of values
//   run a simulation and report spike frequency
// save i & corresponding f to a file
// optionally plot fi curve

//standard neuron library loading
{load_file("nrngui.hoc")}

objref pc // create ParallelContext instance here
pc = new ParallelContext() // so it exists whenever we need it
////////////////////
/*Cell Morphology */
////////////////////


////// Dendrites /////
{load_file("hoc/dendrite_morphology.hoc")} // insert pas into dendrite
//readjust_dend_diam()

////// Soma //////

{load_file("hoc/add_soma.hoc")}  // inserts pas into soma
small_soma() // start out with a small soma size from BC126 // micro_soma()
ndend=100




// We'll wire all the pieces from above here because that seems like a good idea
{connect apicaltrunk[0](0), soma(1)
connect apicaltuftNexus(0),  apicaltrunk[ndend-1](1)
connect apicaltuftA(0), apicaltuftNexus(1)
connect apicaltuftB(0), apicaltuftNexus(1)}

//soma connect basal(0), 0.5
//soma connect ais(0), 0
//ais connect axon(0), 1


for i=0,ndend-2 {
	if (ndend>1) {
		{connect  apicaltrunk[i+1](0), apicaltrunk[i](1)}
	}
}

////// Spines ///////
// at the moment there are none

{load_file("hoc/spine_template.hoc")}  // inserts pas into spine
{load_file("hoc/spine_placement.hoc")} // and spine geometry

////////////////
/* Biophysics */
////////////////

//// Synapse insertion /////
{load_file("hoc/insert_GABAsynapse.hoc")}

///// Channel expression //////
KAP_alpha=0
KAP_beta= 0
		
KAD_alpha=0
KAD_beta= 0


{load_file("hoc/channel_expression.hoc")}


{load_file("hoc/insert_GABAsynapse.hoc")}

///// Electrodes ///////



/////////
/* RIG */
/////////
//{load_file("ses/MultIClampTrain.ses")}   // this is setup to do 100 Hz stimulation
{load_file("ses/MultiClampSingle.ses")}   // a single bAP
//{load_file("ses/spaceplotCa.ses")}
//{load_file("ses/spaceplot.ses")}
//{load_file("ses/voltageapicaltrunk.ses")}
{load_file("ses/RunControl.ses")}
//{load_file("ses/Spine_CAI.ses")}

//{load_file("ses/Dendrite_CAI.ses")}
//{load_file("ses/KA_distribution.ses")}
//{load_file("ses/KAp_activation.ses")} 
//{load_file("ses/KAd_activation.ses")} 
//load_file("hoc/init_figs.hoc")
tstop=500
objref strobj
strobj= new StringFunctions()

{load_file("hoc/spine_calcium_filewrite.hoc")}



{load_file("hoc/runGABAinhib.hoc")}
{load_file("hoc/runGABAinhibShaft.hoc")}
{load_file("hoc/optimize_IClamp.hoc")}

///SETTING UP Simulation
	strdef exptname
	forall {gbar_Ca_HVA=0}
	Spine[0].head.gbar_Ca_HVA=0
	apicaltrunk[24].gbar_Ca_HVA=0
	//Spine[0].head {insert cah}
	//apicaltrunk[24] {insert cah}
	
	
	//INSERT SPINE CALCIUM HERE
	Spine[0].head {insert car}
	apicaltrunk[24] {insert car }
	Spine[0].head.pbar_car=1e-4
	apicaltrunk[24].pbar_car=1e-4
	//Spine[0].head.pbar_cah=1e-3
	//apicaltrunk[24].pbar_cah=1e-3
	
	//Spine[0].head.shifth_car=-10
	//apicaltrunk[24].shifth_car=-10
	
	//HERE'S THE LOOP TO RUN DIFFERENT K CONDUCTANCES
	Spine[0].head.gbar_kad=0
	//apicaltrunk[24].gbar_na=25
	forsec "apicaltrunk" { gbar_na=40}
	forsec "apicaltrunk" { gbar_kv=1}
	soma.gbar_na= 80
	soma.gbar_kv=12
	Spine[0].head.gbar_na=apicaltrunk[24].gbar_na
	Spine[0].head.gbar_kv=apicaltrunk[24].gbar_kv
	//forsec "apicaltrunk" { gbar_kad=4e-3}
	

	
	KAD_beta=0
	KAD_alpha=0
	v_init=-64

	celsius=23
	LinearKAGradient()
	IClamp[0].amp=0.025
	
	GABA_g=4e-4
	forall if(ismembrane("pas")) {e_pas=-64}
	//dt=0.001

proc setparams() {local i
	if ($2==1) {
		apicaltrunk[24].gbar_kad=0
		Spine[0].head.gbar_kad=0.01*$1
	} else {
		KAD_beta=0
		KAD_alpha=$1 * 1e-3
		LinearKAGradient()
	}
}

proc set_ena() {
	 forall if(ismembrane("na_ion")) {ena=$1}
}





///// Simulation control

func fi_ena() { // set params, execute a simulation, analyze and return results
	// $1 = ena
	// $2 = IClamp amplitude
	// $3 = shift_car
	ttrial = startsw()
	IClamp[0].amp=$2
  MultIClamp[0].del=500
	MultIClamp[0].amp=1
	ns.start=485
	
	setparams(40, 0)			// We'll use 40 as our default KAD
	set_ena($1)
	Spine[0].head {shift_car = 2 + ($3-1)*10}
	apicaltrunk[24] {shift_car = 2 + ($3-1)*10}  
	dt=0.005
	optimize_IClamp(-64, 10000, .0001)
	dt=0.005
	tstop=700	sprint(exptname, "GABAg_5em4/ena/ena_%d/%s_%d/", $1,"shift_car", $3)
	RunGABAInhibShaft(exptname, 5e-4)
	tstop=700	sprint(exptname, "GABAg_5em4/ena/ena_%d/%s_%d/", $1,"shift_car", $3)
	RunGABAInhibShaft(exptname, 6e-4)
	tstop=700	sprint(exptname, "GABAg_5em4/ena/ena_%d/%s_%d/", $1,"shift_car", $3)
	RunGABAInhibShaft(exptname, 7e-4)
	//tstop=700	sprint(exptname, "GABAg_2em3/ena/ena_%d/%s_%d/", $1,"shift_car", $3)
	//RunGABAInhibShaft(exptname, 2e-3)

	//tstop=700	sprint(exptname, "GABAg_4em3/ena/ena_%d/%s_%d/", $1, "shift_car", $3)
	//RunGABAInhibShaft(exptname, 4e-3)
		
	print "Run: ", $1*$3/10, " on Worker:", pc.id, " took ", startsw()-ttrial, "seconds" 
	return IClamp[0].amp
}

func fi_gk() { // set params, execute a simulation, analyze and return results
	// $1 = gk
	// $2 = IClamp amplitude
	// $3 = shift_car

	ttrial = startsw()
	IClamp[0].amp=$2
  MultIClamp[0].del=500
	MultIClamp[0].amp=1
	ns.start=485
	
	setparams($1*10, 0)			// vary our gk
	set_ena(60)						// use our default ena of 60
	Spine[0].head {shift_car = 2 + ($3-1)*10}
	apicaltrunk[24] {shift_car = 2 + ($3-1)*10} 
	
	optimize_IClamp(-64, 10000, .01)
	dt=0.025

	//tstop=700	sprint(exptname, "GABAg_7em4/gk/gk_%d/%s_%d/", $1,"shift_car", $3)
	//RunGABAInhibShaft(exptname, 7e-4)
	//tstop=700	sprint(exptname, "GABAg_5em4/gk/gk_%d/%s_%d/", $1,"shift_car", $3)
	RunGABAInhibShaft(exptname, 5e-4)
	tstop=700	sprint(exptname, "GABAg_6em4/gk/gk_%d/%s_%d/", $1,"shift_car", $3)
	//RunGABAInhibShaft(exptname, 6e-4)
	//	tstop=700	sprint(exptname, "GABAg_7em4/gk/gk_%d/%s_%d/", $1,"shift_car", $3)
	//RunGABAInhibShaft(exptname, 7e-4)
	tstop=700	sprint(exptname, "GABAg_2em3/gk/gk_%d/%s_%d/", $1,"shift_car", $3)
	RunGABAInhibShaft(exptname, 2e-3)

	//tstop=700	sprint(exptname, "GABAg_4em3/gk/gk_%d/%s_%d/", $1,"shift_car", $3)
	//RunGABAInhibShaft(exptname, 4e-3)
		
	print "Run: ", $1*$3/10, " on Worker:", pc.id, " took ", startsw()-ttrial, "seconds" 
	return IClamp[0].amp
}


print "Creating PC Worker", pc.id
{ pc.runworker() } // start execute loop on the workers
// code beyond this point is executed only by the master
// the master must now post jobs to the bulletin board

objref svec, fvec

clamp=IClamp[0].amp


// batch control
trun = startsw() 
proc batchrun() { local ii, jj, tmp
  svec = new Vector()
  fvec = new Vector()
	//for ii = $1, $2 {pc.submit("fi_ena", ii, clamp, 0)}
	//for ii = $3, $4 {pc.submit("fi_gk", ii, clamp, 0)}
	//for ii = $1, $2 {pc.submit("fi_ena", ii, clamp, 1)}
	//for ii = $3, $4 {pc.submit("fi_gk", ii, clamp, 1)}
	//for ii = $1, $2 {pc.submit("fi_ena", ii, clamp, 1)}
	for ii = $3, $4 {pc.submit("fi_gk", ii, clamp, 1)}
  // retrieve results from bulletin board
  while (pc.working) { // if a result is ready, get it; if not, pick a job and do it
    //fvec.append(pc.retval()) // get frequency
		clamp=pc.retval()
    pc.unpack(&tmp)
    svec.append(tmp) // get job number
    printf(".") // indicate progress
  }
}

//bactchrun(20,20,40,40)
batchrun(50,70, 1, 10)

{ pc.done() }

print startsw() - trun, "seconds" // report run time
quit()
